---
# tasks file for k8s

- name: Show facts available on the system
  ansible.builtin.debug:
    var: ansible_facts
  when: k8s_display_facts == "yes"

# selinux block requires to install a module using "ansible-galaxy collection install ansible.posix"
- name: Set selinux to permissive mode
  ansible.posix.selinux:
    policy: targeted
    state: permissive
  when: ubuntu_selinux == "yes"

#- name: Ensure selinux remains permissive accross reboots during initialization of Kubernetes 
#  replace:
#    path: /etc/sysconfig/selinux 
#    regexp: '^([^#].*?\sSELINUX=enforcing\s+sw\s+.*)$'
#    replace: 'SELINUX=permissive'
#  when: ubuntu_selinux == "yes"

- name: Disable memory swapping to disk since kubernetes can't work with swap enabled
  shell: |
    swapoff -a
    # when: kubernetes_installed is changed

- name: Disable memory swapping to disk in fstab since kubernetes can't work with swap enabled
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'
  when: ansible_facts['os_family']|lower == 'ubuntu'

# Set overlay and br_netfilter kernel modules to be loaded on system startup 
- name: Set overlay and br_netfilter kernel modules to be loaded on system startup 
  lineinfile:
    dest: /etc/modules-load.d/crio.conf 
    line: "{{ item }}"
    state: present
    create: yes
    backup: yes
  loop:
    - overlay
    - br_netfilter

# Load overlay and br_netfilter kernel modules
- name: overlay and br_netfilter kernel modules 
  modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter

- name: "Add apt signing keys"
  apt_key:
    url: "{{ item }}"
    state: present
  loop:
    - "{{ ubuntu_k8s_gpgkey1 }}"

# Installation of kubeadm, kubelet and kubectl 
- name: "Add Kubernetes {{ k8s_version }} apt repository"
  apt_repository:
    repo: "{{ ubuntu_k8s_repourl1 }}"
    filename: "{{ ubuntu_k8s_repofilename1 }}"
    mode: 0640
    state: present
    update_cache: yes

- name: 'Install Kubernetes {{ k8s_version }} packages: {{ ubuntu_kubeadm_pkgname }}, {{ ubuntu_kubelet_pkgname }}, {{ ubuntu_kubectl_pkgname }}'
  apt:
    pkg: "{{ item }}"
    state: present
    update_cache: yes
    autoremove: yes
  loop:
    - "{{ ubuntu_kubeadm_pkgname }}"
    - "{{ ubuntu_kubelet_pkgname }}"
    - "{{ ubuntu_kubectl_pkgname }}"
  notify:
    - enable kubelet 

# Upload cluster and kubelet configuration file 
- name: "Experimental - Upload cluster and kubelet configuration file"  
  template:
    src:   cluster-kubelet-config.j2
    dest:  "{{ k8s_cluster_kubelet_configfile }}"
    owner: root
    group: root
    mode:  0640

# Upload kubelet arguments configuration file 
- name: "Upload kubelet arguments configuration file"  
  template:
    src:   kubelet.j2
    dest:  "{{ k8s_kubelet_extraargs_destfile }}"
    owner: root
    group: root
    mode:  0640
  notify:
    - restart kubelet

# Upload join command file to workers
- name: Upload join command file to {{ inventory_hostname }}
  become: no
  copy:
    local_follow: yes
    src: "{{ k8s_join_workers_dir }}/{{ k8s_join_workers_file }}"
    dest: "{{ k8s_join_workers_file }}"
    mode: 0600
  when: inventory_hostname in groups['k8sworkernodes'] 

# Join Kubernetes worker using kubeadm
- name: Join Kubernetes worker {{ inventory_hostname }} using kubeadm 
  become: yes
  command: sh "{{ k8s_join_workers_file }}"
  register: joiner_status 
  when: inventory_hostname in groups['k8sworkernodes'] 

# Remove join command file from worker node (it contains sensitive credentials) 
- name: Remove join command file from {{ inventory_hostname }}
  become: no
  file:
    path: "{{ k8s_join_workers_file }}"
    state: absent

- name: set selinux back to enforcing mode
  ansible.posix.selinux:
    policy: targeted
    state: enforcing
  when: ubuntu_selinux == "yes"

#- name: Ensure selinux remains enforcing accross reboots after initialization of Kubernetes on 
#  replace:
#  path: /etc/sysconfig/selinux 
#  regexp: '^([^#].*?\sSELINUX=permissive\s+sw\s+.*)$'
#  replace: 'SELINUX=enforcing'
#  when: ubuntu_selinux == "yes"
