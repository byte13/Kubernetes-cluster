---
# tasks file for k8s CNI

- name: Show facts available on the system
  ansible.builtin.debug:
    var: ansible_facts
  when: cni_display_facts == "yes"

#################
# Calico specific
#################
- name: Set firewalld trusted zone as the default zone
  become: yes
  shell: |
    firewall-cmd --set-default-zone trusted
  notify:
    - reload firewalld
  when: ((ansible_facts['os_family']|lower == 'redhat') or (ansible_facts['os_family']|lower == 'rocky')) and (centos_cni == "calico")

#- name: Set interface {{ centos_host_interface }} in public firewall zone on CentOS/Redhat/Rock-Linux
#  firewalld:
#    zone: public
#    interface: "{{ centos_host_interface }}"
#    permanent: yes
#    immediate: yes
#    state: enabled
#  notify:
#    - reload firewalld
#  when: ((ansible_facts['os_family']|lower == 'redhat') or (ansible_facts['os_family']|lower == 'rocky')) and (centos_cni == "calico")

- name: Set interface {{ centos_host_interface }} in public firewall zone on CentOS/Redhat/Rock-Linux
  become: yes
  shell: |
    firewall-cmd --zone=public --add-interface={{ centos_host_interface }} --permanent
  notify:
    - reload firewalld
  when: ((ansible_facts['os_family']|lower == 'redhat') or (ansible_facts['os_family']|lower == 'rocky')) and (centos_cni == "calico")

- name: Set firewall masquerade in public firewalld zone on CentOS/Redhat/Rock-Linux
  firewalld:
    zone: public
    masquerade: yes
    state: enabled
    permanent: yes
    immediate: yes
  when: ((ansible_facts['os_family']|lower == 'redhat') or (ansible_facts['os_family']|lower == 'rocky')) and (centos_cni == "calico")

- name: Set firewall rules for Calico CNI to allow BGP on CentOS/Redhat/Rock-Linux
  firewalld:
    zone: public
    port: "{{ item }}"
    permanent: yes
    immediate: yes
    state: enabled
  loop:
    # For Calico CNI
    - 179/tcp
  notify:
    - reload firewalld
  when: ((ansible_facts['os_family']|lower == 'redhat') or (ansible_facts['os_family']|lower == 'rocky')) and (centos_cni == "calico")

# Next rule required if Calico ipipMode is set to "Always".
# Not required if ipipMode is set to "CrossSubnet" and all nodes are in same subnet
- name: Set firewall rules for Calico CNI to allow protocol 4 (IPinIP tunnel) on CentOS/Redhat/Rock-Linux
  shell: /bin/firewall-cmd --permanent --add-protocol=4 --zone public
  notify:
    - reload firewalld
  when: ((ansible_facts['os_family']|lower == 'redhat') or (ansible_facts['os_family']|lower == 'rocky')) and (centos_cni == "calico")

- name: Deploy Calico CNI on Centos, Redhat or Rocky-Linux 
  become: no
  #shell: kubectl apply -f {{centos_calico_url }} 
  #command: kubectl --kubeconfig=~{{ remote_user }}/.kube/config apply -f {{ centos_calico_url }} 
  command: kubectl apply -f {{ centos_calico_url }} 
  when: (inventory_hostname in groups['k8smasternodes']) and (centos_cni == "calico")

#################
# Cilium specific
#################
#- name: Set firewalld trusted zone as the default zone
#  become: yes
#  shell: |
#    firewall-cmd --set-default-zone trusted
#  notify:
#    - reload firewalld
#  when: (inventory_hostname in groups['k8smasternodes']) and (centos_cni == "cilium")
#
#- name: Set interface "{{ centos_host_interface }}" in public firewall zone on CentOS/Redhat/Rock-Linux
#  firewalld:
#    zone: public
#    interface: "{{ centos_host_interface }}"
#    permanent: yes
#    immediate: yes
#    state: enabled
#  notify:
#    - reload firewalld
#  when: ((ansible_facts['os_family']|lower == 'redhat') or (ansible_facts['os_family']|lower == 'rocky')) and (centos_cni == "cilium")

- name: Set firewall masquerade in public firewalld zone on CentOS/Redhat/Rock-Linux
  firewalld:
    zone: public
    masquerade: yes
    state: enabled
    permanent: yes
    immediate: yes
  when: ((ansible_facts['os_family']|lower == 'redhat') or (ansible_facts['os_family']|lower == 'rocky')) and (centos_cni == "cilium")

- name: Set firewall rules for Cilium CNI to allow Hubble, healthchecks and VXLAN on CentOS/Redhat/Rock-Linux
  firewalld:
    zone: public
    port: "{{ item }}"
    permanent: yes
    immediate: yes
    state: enabled
  loop:
    - 8472/udp
    - 4240/tcp 
    - 4245/tcp 
    - 12000/tcp 
  notify:
    - reload firewalld
  when: ((ansible_facts['os_family']|lower == 'redhat') or (ansible_facts['os_family']|lower == 'rocky')) and (centos_cni == "cilium")

- name: Install the latest version of curl
  become: yes
  dnf:
    name: curl
    state: latest
  when: (inventory_hostname in groups['k8smasternodes']) and (centos_cni == "cilium")

- name: Install Cilium cLi
  become: yes
  shell: |
    curl -L --remote-name-all https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-amd64.tar.gz{,.sha256sum}
    sha256sum --check cilium-linux-amd64.tar.gz.sha256sum
    tar xzvfC cilium-linux-amd64.tar.gz /usr/local/bin
    rm cilium-linux-amd64.tar.gz{,.sha256sum}
  when: (inventory_hostname in groups['k8smasternodes']) and (centos_cni == "cilium")

- name: Install Hubble CLI
  become: yes
  shell: |
    export HUBBLE_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/hubble/master/stable.txt)
    curl -L --remote-name-all https://github.com/cilium/hubble/releases/download/$HUBBLE_VERSION/hubble-linux-amd64.tar.gz{,.sha256sum}
    sha256sum --check hubble-linux-amd64.tar.gz.sha256sum
    tar xzvfC hubble-linux-amd64.tar.gz /usr/local/bin
    rm hubble-linux-amd64.tar.gz{,.sha256sum}
  when: (inventory_hostname in groups['k8smasternodes']) and (centos_cni == "cilium") and (cilium_activate_hubble == "yes")

#- name: Install Cilium cNi using Cilium CLI 
#  become: no
#  shell: |
#    cilium install
#  when: (inventory_hostname in groups['k8smasternodes']) and (centos_cni == "cilium")

#- name: Enable Hubble observatory in Cilium using Cilium CLI
#  become: no
#  shell: |
#    cilium hubble enable
#  when: (inventory_hostname in groups['k8smasternodes']) and (centos_cni == "cilium") and (cilium_activate_hubble == "yes")

# Next one fails because using "become: yes", command -v helm fails (tried with sudo command - v helm)
# while helm is available in /usr/local/bin
#- name: Install the latest version of Helm
#  become: yes
#  shell: |
#    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
#    chmod 700 get_helm.sh
#    ./get_helm.sh && rm get_helm.sh
#  when: (inventory_hostname in groups['k8smasternodes']) and (centos_cni == "cilium")

- name: Add Cilium CNI Helm repository
  become: no
  shell: |
    helm repo add cilium {{ cilium_helm_repository }}   
  when: (inventory_hostname in groups['k8smasternodes']) and (centos_cni == "cilium")

- name: Install Cilium CNI using Helm chart 
  become: no
  shell: |
    helm install cilium {{ cilium_helm_chart }} --version {{ cilium_version }} --set ipam.mode=cluster-pool --set ipam.operator.clusterPoolIPv4PodCIDR={{ k8s_pods_subnet }} --set ipam.operator.clusterPoolIPv4MaskSize={{ k8s_pods_subnetmask }} --namespace kube-system 
  when: (inventory_hostname in groups['k8smasternodes']) and (centos_cni == "cilium")

- name: Enable Hubble observatory in Cilium using Helm
  become: no
  shell: |
    helm upgrade cilium cilium/cilium --version {{ cilium_version }} --namespace kube-system --reuse-values --set hubble.relay.enabled=true --set hubble.ui.enabled=true
  when: (inventory_hostname in groups['k8smasternodes']) and (centos_cni == "cilium") and (cilium_activate_hubble == "yes")

#- name: Add Cilium CNI Helm repository
#  helm_repository:
#    name: stable
#    repo_url: "{{ cilium_helm_repository }}"
#    repo_state: present
#  when: (inventory_hostname in groups['k8smasternodes']) and (centos_cni == "cilium")

#- name: Install Cilium CNI using Helm chart 
#  helm:
#    name: cilium
#    chart_ref: "{{ cilium_helm_chart }}"
#    release_namespace: cilium 
#    namespace: kube-system
#  when: (inventory_hostname in groups['k8smasternodes']) and (centos_cni == "cilium")

################
# Weave specific
################
- name: Set interface "{{ centos_host_interface }}" in public firewall zone on CentOS/Redhat/Rock-Linux
  firewalld:
    zone: public
    interface: "{{ centos_host_interface }}"
    permanent: yes
    immediate: yes
    state: enabled
  notify:
    - reload firewalld
  when: ((ansible_facts['os_family']|lower == 'redhat') or (ansible_facts['os_family']|lower == 'rocky')) and (centos_cni == "weave")

- name: Set firewall rules for Weave CNI on CentOS/Redhat/Rock-Linux
  firewalld:
    zone: public
    port: "{{ item }}"
    permanent: yes
    immediate: yes
    state: enabled
  loop:
    # For Weave CNI
    - 6783/tcp
    - 6784/tcp
    - 6783/udp
    - 6784/udp
  notify:
    - reload firewalld
  when: ((ansible_facts['os_family']|lower == 'redhat') or (ansible_facts['os_family']|lower == 'rocky')) and (centos_cni == "weave")

- name: Deploy Weave CNI on Centos, Redhat or Rocky-LinuxUbuntu
  become: no
  shell: kubectl apply -f {{ centos_weave_url }} 
  #command: kubectl --kubeconfig=~{{ remote_user }}/.kube/config apply -f {{ centos_weave_url }} 
  #command: kubectl apply -f {{ centos_weave_url }} 
  when: (inventory_hostname in groups['k8smasternodes']) and (centos_cni == "weave")
